// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	ticker "chaos-go/internal/ticker"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TickerRepository is an autogenerated mock type for the TickerRepository type
type TickerRepository struct {
	mock.Mock
}

// GetAveragePrice provides a mock function with given fields: symbol, start, end
func (_m *TickerRepository) GetAveragePrice(symbol string, start time.Time, end time.Time) (ticker.AvgPrice, error) {
	ret := _m.Called(symbol, start, end)

	var r0 ticker.AvgPrice
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) ticker.AvgPrice); ok {
		r0 = rf(symbol, start, end)
	} else {
		r0 = ret.Get(0).(ticker.AvgPrice)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Time, time.Time) error); ok {
		r1 = rf(symbol, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastPrice provides a mock function with given fields: symbol
func (_m *TickerRepository) GetLastPrice(symbol string) (ticker.Aggregates, error) {
	ret := _m.Called(symbol)

	var r0 ticker.Aggregates
	if rf, ok := ret.Get(0).(func(string) ticker.Aggregates); ok {
		r0 = rf(symbol)
	} else {
		r0 = ret.Get(0).(ticker.Aggregates)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrCreateTicker provides a mock function with given fields: symbol
func (_m *TickerRepository) GetOrCreateTicker(symbol string) (ticker.Ticker, error) {
	ret := _m.Called(symbol)

	var r0 ticker.Ticker
	if rf, ok := ret.Get(0).(func(string) ticker.Ticker); ok {
		r0 = rf(symbol)
	} else {
		r0 = ret.Get(0).(ticker.Ticker)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPriceByDate provides a mock function with given fields: symbol, date
func (_m *TickerRepository) GetPriceByDate(symbol string, date time.Time) (ticker.Aggregates, error) {
	ret := _m.Called(symbol, date)

	var r0 ticker.Aggregates
	if rf, ok := ret.Get(0).(func(string, time.Time) ticker.Aggregates); ok {
		r0 = rf(symbol, date)
	} else {
		r0 = ret.Get(0).(ticker.Aggregates)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Time) error); ok {
		r1 = rf(symbol, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTicker provides a mock function with given fields: symbol
func (_m *TickerRepository) GetTicker(symbol string) (ticker.Ticker, error) {
	ret := _m.Called(symbol)

	var r0 ticker.Ticker
	if rf, ok := ret.Get(0).(func(string) ticker.Ticker); ok {
		r0 = rf(symbol)
	} else {
		r0 = ret.Get(0).(ticker.Ticker)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveOne provides a mock function with given fields: data
func (_m *TickerRepository) SaveOne(data interface{}) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTickerRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTickerRepository creates a new instance of TickerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTickerRepository(t mockConstructorTestingTNewTickerRepository) *TickerRepository {
	mock := &TickerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
