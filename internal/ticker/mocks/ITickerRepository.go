// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	ticker "chaos-go/internal/ticker"

	mock "github.com/stretchr/testify/mock"
)

// ITickerRepository is an autogenerated mock type for the ITickerRepository type
type ITickerRepository struct {
	mock.Mock
}

// GetOrCreateTicker provides a mock function with given fields: symbol
func (_m *ITickerRepository) GetOrCreateTicker(symbol string) (ticker.Ticker, error) {
	ret := _m.Called(symbol)

	var r0 ticker.Ticker
	if rf, ok := ret.Get(0).(func(string) ticker.Ticker); ok {
		r0 = rf(symbol)
	} else {
		r0 = ret.Get(0).(ticker.Ticker)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveOne provides a mock function with given fields: data
func (_m *ITickerRepository) SaveOne(data ticker.Ticker) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(ticker.Ticker) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewITickerRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewITickerRepository creates a new instance of ITickerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewITickerRepository(t mockConstructorTestingTNewITickerRepository) *ITickerRepository {
	mock := &ITickerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
